/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package in.drongo.drongodb.util.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FileEntryAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1316271676839947124L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FileEntryAvro\",\"namespace\":\"in.drongo.drongodb.util.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"bytes\"},{\"name\":\"keyLen\",\"type\":\"bytes\"},{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"valueLen\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FileEntryAvro> ENCODER =
      new BinaryMessageEncoder<FileEntryAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FileEntryAvro> DECODER =
      new BinaryMessageDecoder<FileEntryAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<FileEntryAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<FileEntryAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FileEntryAvro>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this FileEntryAvro to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a FileEntryAvro from a ByteBuffer. */
  public static FileEntryAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.nio.ByteBuffer id;
  @Deprecated public java.nio.ByteBuffer keyLen;
  @Deprecated public java.nio.ByteBuffer key;
  @Deprecated public java.nio.ByteBuffer valueLen;
  @Deprecated public java.nio.ByteBuffer value;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FileEntryAvro() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param keyLen The new value for keyLen
   * @param key The new value for key
   * @param valueLen The new value for valueLen
   * @param value The new value for value
   */
  public FileEntryAvro(java.nio.ByteBuffer id, java.nio.ByteBuffer keyLen, java.nio.ByteBuffer key, java.nio.ByteBuffer valueLen, java.nio.ByteBuffer value) {
    this.id = id;
    this.keyLen = keyLen;
    this.key = key;
    this.valueLen = valueLen;
    this.value = value;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return keyLen;
    case 2: return key;
    case 3: return valueLen;
    case 4: return value;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.nio.ByteBuffer)value$; break;
    case 1: keyLen = (java.nio.ByteBuffer)value$; break;
    case 2: key = (java.nio.ByteBuffer)value$; break;
    case 3: valueLen = (java.nio.ByteBuffer)value$; break;
    case 4: value = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.nio.ByteBuffer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.nio.ByteBuffer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'keyLen' field.
   * @return The value of the 'keyLen' field.
   */
  public java.nio.ByteBuffer getKeyLen() {
    return keyLen;
  }

  /**
   * Sets the value of the 'keyLen' field.
   * @param value the value to set.
   */
  public void setKeyLen(java.nio.ByteBuffer value) {
    this.keyLen = value;
  }

  /**
   * Gets the value of the 'key' field.
   * @return The value of the 'key' field.
   */
  public java.nio.ByteBuffer getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(java.nio.ByteBuffer value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'valueLen' field.
   * @return The value of the 'valueLen' field.
   */
  public java.nio.ByteBuffer getValueLen() {
    return valueLen;
  }

  /**
   * Sets the value of the 'valueLen' field.
   * @param value the value to set.
   */
  public void setValueLen(java.nio.ByteBuffer value) {
    this.valueLen = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.nio.ByteBuffer getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.nio.ByteBuffer value) {
    this.value = value;
  }

  /**
   * Creates a new FileEntryAvro RecordBuilder.
   * @return A new FileEntryAvro RecordBuilder
   */
  public static in.drongo.drongodb.util.avro.FileEntryAvro.Builder newBuilder() {
    return new in.drongo.drongodb.util.avro.FileEntryAvro.Builder();
  }

  /**
   * Creates a new FileEntryAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FileEntryAvro RecordBuilder
   */
  public static in.drongo.drongodb.util.avro.FileEntryAvro.Builder newBuilder(in.drongo.drongodb.util.avro.FileEntryAvro.Builder other) {
    return new in.drongo.drongodb.util.avro.FileEntryAvro.Builder(other);
  }

  /**
   * Creates a new FileEntryAvro RecordBuilder by copying an existing FileEntryAvro instance.
   * @param other The existing instance to copy.
   * @return A new FileEntryAvro RecordBuilder
   */
  public static in.drongo.drongodb.util.avro.FileEntryAvro.Builder newBuilder(in.drongo.drongodb.util.avro.FileEntryAvro other) {
    return new in.drongo.drongodb.util.avro.FileEntryAvro.Builder(other);
  }

  /**
   * RecordBuilder for FileEntryAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FileEntryAvro>
    implements org.apache.avro.data.RecordBuilder<FileEntryAvro> {

    private java.nio.ByteBuffer id;
    private java.nio.ByteBuffer keyLen;
    private java.nio.ByteBuffer key;
    private java.nio.ByteBuffer valueLen;
    private java.nio.ByteBuffer value;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(in.drongo.drongodb.util.avro.FileEntryAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.keyLen)) {
        this.keyLen = data().deepCopy(fields()[1].schema(), other.keyLen);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.key)) {
        this.key = data().deepCopy(fields()[2].schema(), other.key);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.valueLen)) {
        this.valueLen = data().deepCopy(fields()[3].schema(), other.valueLen);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.value)) {
        this.value = data().deepCopy(fields()[4].schema(), other.value);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FileEntryAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(in.drongo.drongodb.util.avro.FileEntryAvro other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.keyLen)) {
        this.keyLen = data().deepCopy(fields()[1].schema(), other.keyLen);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.key)) {
        this.key = data().deepCopy(fields()[2].schema(), other.key);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.valueLen)) {
        this.valueLen = data().deepCopy(fields()[3].schema(), other.valueLen);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.value)) {
        this.value = data().deepCopy(fields()[4].schema(), other.value);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public in.drongo.drongodb.util.avro.FileEntryAvro.Builder setId(java.nio.ByteBuffer value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public in.drongo.drongodb.util.avro.FileEntryAvro.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyLen' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getKeyLen() {
      return keyLen;
    }

    /**
      * Sets the value of the 'keyLen' field.
      * @param value The value of 'keyLen'.
      * @return This builder.
      */
    public in.drongo.drongodb.util.avro.FileEntryAvro.Builder setKeyLen(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.keyLen = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'keyLen' field has been set.
      * @return True if the 'keyLen' field has been set, false otherwise.
      */
    public boolean hasKeyLen() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'keyLen' field.
      * @return This builder.
      */
    public in.drongo.drongodb.util.avro.FileEntryAvro.Builder clearKeyLen() {
      keyLen = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'key' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getKey() {
      return key;
    }

    /**
      * Sets the value of the 'key' field.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public in.drongo.drongodb.util.avro.FileEntryAvro.Builder setKey(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.key = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'key' field.
      * @return This builder.
      */
    public in.drongo.drongodb.util.avro.FileEntryAvro.Builder clearKey() {
      key = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueLen' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getValueLen() {
      return valueLen;
    }

    /**
      * Sets the value of the 'valueLen' field.
      * @param value The value of 'valueLen'.
      * @return This builder.
      */
    public in.drongo.drongodb.util.avro.FileEntryAvro.Builder setValueLen(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.valueLen = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'valueLen' field has been set.
      * @return True if the 'valueLen' field has been set, false otherwise.
      */
    public boolean hasValueLen() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'valueLen' field.
      * @return This builder.
      */
    public in.drongo.drongodb.util.avro.FileEntryAvro.Builder clearValueLen() {
      valueLen = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public in.drongo.drongodb.util.avro.FileEntryAvro.Builder setValue(java.nio.ByteBuffer value) {
      validate(fields()[4], value);
      this.value = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public in.drongo.drongodb.util.avro.FileEntryAvro.Builder clearValue() {
      value = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FileEntryAvro build() {
      try {
        FileEntryAvro record = new FileEntryAvro();
        record.id = fieldSetFlags()[0] ? this.id : (java.nio.ByteBuffer) defaultValue(fields()[0]);
        record.keyLen = fieldSetFlags()[1] ? this.keyLen : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.key = fieldSetFlags()[2] ? this.key : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        record.valueLen = fieldSetFlags()[3] ? this.valueLen : (java.nio.ByteBuffer) defaultValue(fields()[3]);
        record.value = fieldSetFlags()[4] ? this.value : (java.nio.ByteBuffer) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FileEntryAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<FileEntryAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FileEntryAvro>
    READER$ = (org.apache.avro.io.DatumReader<FileEntryAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
